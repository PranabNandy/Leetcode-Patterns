01. What are the advantages of using Git over other version control systems?
02. Explain the basic Git workflow.
03. What is the purpose of the .gitignore file?
04. How do you create and switch branches in Git?
05. What is a merge conflict? How do you resolve it?
06. Explain the difference between 'git pull' and 'git fetch'.
07. What is rebasing in Git? When would you use it?
08. What is the purpose of 'git revert' and 'git reset'? How do they differ?
09. What is a Git hook?
10. How do you squash commits in Git?
11. What is the command to stage all changes in the working directory in Git?
12. How do you undo the most recent commit in Git?
13. What is the purpose of the HEAD pointer in Git?
14. How do you view the commit history in Git?
15. What is the command to show the changes between two commits in Git?
16. Explain the difference between a fast-forward merge and a recursive merge in Git.
17. How do you rename a file in Git without losing its history?
18. How do you remove a file from staging in Git?
19. What is the difference between a remote and a local repository in Git?
20. How do you clone a Git repository?
21. What is Git bisect and how do you use it?
22. How do you list all branches in a Git repository?
23. What is the purpose of the .gitattributes file?
24. What is a submodule in Git? Give me practical example to use it.
25. How do you show the changes introduced by a specific commit in Git?
26. What is the difference between 'git merge' and 'git rebase'?
27. How do you revert a commit that has already been pushed and made public?
28. What is the purpose of the --no-ff flag in Git merge?
29. How do you amend the message of the most recent commit in Git?
30. How do you delete a branch in Git?
31. What is the purpose of the .gitkeep file?
32. How do you cherry-pick a commit in Git?
33. What is the purpose of the .git folder?
34. How do you undo the last commit but keep the changes in Git?
